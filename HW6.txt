-- Homework #6

-- Part 1   classicmodels db: finish queries (24)

select * from classicmodels.customers;
select * from classicmodels.employees;
select * from classicmodels.offices;
select * from classicmodels.payments;
select * from classicmodels.orderdetails;
select * from classicmodels.orders;
select * from classicmodels.productlines;
select * from classicmodels.products;

select count(*) from classicmodels.customers;
select count(*) from classicmodels.employees;
select count(*) from classicmodels.offices;
select count(*) from classicmodels.payments;
select count(*) from classicmodels.orderdetails;
select count(*) from classicmodels.orders;
select count(*) from classicmodels.productlines;
select count(*) from classicmodels.products;

-- 1.how many vendors, product lines, and products exist in the database?

select
count(distinct ProductVendor) as Vendors_count,
count(distinct ProductLine) as Product_lines_count,
count(distinct productCode) as Products_count
from classicmodels.products;

-- 2.what is the average price (buy price, MSRP) per vendor?

select
productVendor,
avg (buyPrice) as AvgPrice,
avg (MSRP) as AvgMSRP
from classicmodels.products
group by productVendor;

-- 3.what is the average price (buy price, MSRP) per customer?

select
orders.customerNumber,
avg(det.priceEach) as AvgPrice,
avg(prod.buyPrice) as AvgBuyPrice,
avg(prod.MSRP) as AvgMSRP
FROM classicmodels.orders orders
join classicmodels.orderdetails det
on det.orderNumber = orders.orderNumber
join classicmodels.products prod
on det.productCode= prod.productCode
group by orders.customerNumber
order by orders.customerNumber;

-- 4.what product was sold the most?

select prod.productName,
count(prod.productCode) as prod_cnt,
SUM(det.quantityOrdered) as quantity_ordered_sum,
max(det.quantityOrdered) AS order_cnt
from classicmodels.orderdetails det
join classicmodels.products prod 
on det.productCode=prod.productCode
group by prod.productCode
order by prod_cnt desc
limit 1;


-- 5.how much money was made between buyPrice and MSRP?

select SUM(prod.msrp * det.quantityOrdered) as msrp_sales,
SUM(prod.buyPrice * det.quantityOrdered) as buyPrice_sales,
SUM(prod.msrp * det.quantityOrdered) - SUM(prod.buyPrice * det.quantityOrdered) as difference_in_sales
from classicmodels.products prod
join classicmodels.orderdetails det
on prod.productCode = det.productCode;

-- 6.which vendor sells 1966 Shelby Cobra?

select prod.productVendor, prod.productName
from classicmodels.products prod
where prod.productName like '1966 Shelby Cobra%';

-- 7.which vendor sells more products?

select prod.productVendor, SUM(det.quantityOrdered) as quantity, count(det.productcode) as quantity2
from classicmodels.products prod
join classicmodels.orderdetails det 
on prod.productCode = det.productCode
group by prod.productVendor
order by quantity desc
limit 1;

-- 8.which product is the most and least expensive?

SELECT msrp as mostexp, productName
FROM classicmodels.products
ORDER BY msrp desc
LIMIT 1;

-- 9.which product has the most quantityInStock?

SELECT productName, quantityInStock
FROM classicmodels.products
ORDER BY quantityInStock desc
LIMIT 1;

-- 10.list all products that have quantity in stock less than 20

SELECT produuctName, quantityInStock
FROM classicmodels.products
WHERE quantityInStock < 20;

-- 11.which customer has the highest and lowest credit limit?

(SELECT customerNumber, creditLimit as highestLimit
FROM classicmodels.customers
ORDER BY creditlimit desc
LIMIT 1)
union
(SELECT customerNumber, creditLimit as lowerstLimit
FROM classicmodels.customers
ORDER BY creditlimit 
LIMIT 1);

-- 12.rank customers by credit limit

select customerNumber, creditLimit,
RANK() OVER (ORDER BY creditLimit DESC) as credlimit
from classicmodels.customers;

-- 14.customers in what city are the most profitable to the company?

SELECT c.city, c.customerNumber, p.amount as payedAmount
FROM classicmodels.customers c
JOIN classicmodels.payments p ON c.customerNumber = p.customerNumber
ORDER BY p. amount desc
LIMIT 1;

-- 15.what is the average number of orders per customer?

select (count(orderNumber)/count(distinct customerNumber)) as avgPerCust
from classicmodels.orders;

-- 16.who is the best customer?

SELECT c.customerName as bestCustomer, p.amount as amountPayed
FROM classicmodels.payments p
JOIN classicmodels.customers c
ON p.customerNumber=c.customerNamber
ORDER BY amount desc
LIMIT 1;

-- 17.customers without payment

SELECT c.customerName, c.cudtomerName, p.amount
FROM classicmodels.customers c
LEFT JOIN classicmodels.payments p 
ON c.customerNumber = p.customerNumber
WHERE p.amount is Null;

-- 18.what is the average number of days between the order date and ship date?

select sum(datediff(shippedDate, orderDate))/count(*) as averageDays
from classicmodels.orders;

-- 19.sales by year

select
year(paymentDate) as years, sum(amount) as sales
from classicmodels.payments
group by years
order by years;

-- 20.how many orders are not shipped?

select count(*)
from classicmodels.orders
where shippedDate is null;

-- 21.list all employees by their (full name: first + last) in alpabetical order

SELECT
CONCAT(lastName, ' ', firstName) as fullName
FROM classicmodels.employees
ORDER BY fullName;



